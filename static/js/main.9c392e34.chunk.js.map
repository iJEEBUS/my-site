{"version":3,"sources":["components/boid.js","components/sketch.js","components/universe.js","App.js","serviceWorker.js","index.js"],"names":["Boid","p","acc","vel","pos","radius","move","boids","sep","separationForce","align","alignmentForce","coh","cohesionForce","mult","applyForce","velocity","add","acceleration","limit","max_speed","position","x","windowWidth","y","windowHeight","force","flock","sep_dist","steer","createVector","count","forEach","boid","dist","diff","sub","normalize","div","max_force","sum","vision","desired","display","fill","circle","Component","sketch","setup","createCanvas","WEBGL","translate","width","height","noStroke","textSize","textAlign","CENTER","i","x_pos","y_pos","Math","round","random","push","mouseClicked","mouseX","mouseY","draw","background","text","Layout","Content","Universe","props","state","alive","this","title","name","Header","Footer","App","toggleActivate","setState","activate","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c392e34.chunk.js","sourcesContent":["/******************************************************************\n * A boid that will fly around the universe.\n * \n * @author Ron Rounsifer\n ******************************************************************/\nimport { Component } from 'react';\n\n/******************************************************************\n * A Total Daily Exercise Expenditure calculator form.\n ******************************************************************/\nclass Boid extends Component {\n\n    constructor(p, acc, vel, pos, radius) {\n        super();\n        this.p = p;\n        this.acceleration = acc;\n        this.velocity = vel;\n        this.position = pos;\n        this.radius = radius;\n        this.max_speed = 3.0;\n        this.max_force = 0.03;\n        this.vision = 75;\n    }\n\n    move = (boids) => {\n\n        // implement the 3 checks here\n        // 1 - Separation\n        // 2 - Alignment\n        // 3 - Cohesion\n        let sep = this.separationForce(boids);\n        let align = this.alignmentForce(boids);\n        let coh = this.cohesionForce(boids);\n\n        // arbitrary weights\n        sep = sep.mult(1.5);\n        align = align.mult(1.0);\n        coh = coh.mult(1.0);\n\n        this.applyForce(sep);\n        this.applyForce(align);\n        this.applyForce(coh);\n        this.velocity.add(this.acceleration);\n        this.velocity.limit(this.max_speed);\n        this.position.add(this.velocity);\n        this.acceleration.mult(0);\n        \n        // check window boundaries\n        if (this.position.x <= 0) {\n            this.position.x = this.p.windowWidth - 1;\n        } \n        if (this.position.x >= this.p.windowWidth) {\n            this.position.x = 1;\n        }\n        if (this.position.y <= 0){\n            this.position.y = this.p.windowHeight - 1;\n        }\n        if (this.position.y >= this.p.windowHeight) {\n            this.position.y = 1;\n        }\n    }\n\n    applyForce = (force) => {\n        this.acceleration.add(force);\n        this.acceleration.limit(this.max_speed);\n    }\n\n\n    separationForce = (flock) => {\n        let sep_dist = this.radius * 2;\n        let steer = this.p.createVector(0,0);\n        let count = 0.0;\n\n        flock.forEach((boid) => {\n            let dist = this.position.dist(boid.position);\n            if ((dist > 0) && (dist < sep_dist)) {\n                // Calculate a vector that points away from the close boid\n                let diff = this.position.sub(boid.position);\n                diff.normalize();\n                diff.div(dist);\n                steer.add(diff);\n                count += 1.0;\n            }\n        })\n        if (count > 0) {\n            steer.div(count);\n            steer.normalize();\n            steer.mult(this.max_speed);\n            steer.sub(this.velocity);\n            steer.limit(this.max_force);\n            return steer;\n        } else {\n            return this.p.createVector(0,0);\n        }\n    }\n\n    /**\n     * Calculate the average velocity of each boids neighbors.\n     */\n    alignmentForce = (flock) => {\n        let count = 0.0;\n        let sum = this.p.createVector(0,0);\n        flock.forEach((boid) => {\n\n            // only align with those that are close enough\n            // to the current boid\n            let dist = this.position.dist(boid.position);\n            if ((dist > 0) && (dist < this.vision)) {\n                sum.add(boid.velocity);\n                count += 1.0;\n            }\n        });\n        if (count > 0) {\n\n            // Return steering force vector if there are other boids\n            // close by\n            sum.div(count);\n            sum.normalize();\n            sum.mult(this.max_speed);\n\n            // steering force formula\n            let steer = sum.sub(this.velocity);\n            steer.limit(this.max_force)\n            return steer;\n        } else {\n            // Return 0 force vector if no other boids are close\n            return new this.p.createVector(0,0);\n        }\n    }\n\n    /**\n     * Calculate the average position of each boids neighbors.\n     */\n    cohesionForce = (flock) => {\n        \n        let sum = this.p.createVector(0,0);\n        let count = 0;\n        flock.forEach((boid) => {\n            let dist = this.position.dist(boid.position);\n            if ((dist > this.radius) && (dist < this.vision)) {\n                sum.add(boid.position);\n                count++;\n            }\n        });\n\n        if (count > 0) {\n            // Return steering force vector if there are other boids\n            // close by\n            sum.div(count);\n            let desired = sum.sub(this.position);\n            desired.normalize();\n            desired.mult(this.max_speed);\n            let steer = desired.sub(this.velocity);\n            steer.limit(this.max_force);\n            return steer;\n        } else {\n            // Return 0 force vector if no other boids are close\n            return this.p.createVector(0,0);\n        }\n\n    }\n\n    /**\n     * Displays the boid on the canvas.\n     */\n    display = () => {\n        this.p.fill('white');\n        this.p.circle(this.position.x, this.position.y, this.radius);\n    }\n}\n\nexport default Boid;","import Boid from \"./boid\";\n\nexport default function sketch(p){\n    let canvas;\n    let boids = [];\n    let num_boids = 1;\n\n    var title = \"Flocking Algorithm\";\n    var name = \"Ron Rounsifer\";\n\n    p.setup = () => {\n      canvas = p.createCanvas(p.windowWidth-1, p.windowHeight-1, p.WEBGL);\n      p.translate(-p.width/2,-p.height/2,0);\n      p.noStroke();\n      p.fill(255, 255, 255);\n      p.textSize(48);\n      p.textAlign(p.CENTER);\n      \n      for (var i = 0; i < num_boids; i++) {\n       // let x_pos = Math.floor(Math.random() * p.windowWidth) + 1;\n       // let y_pos = Math.floor(Math.random() * p.windowHeight) + 1;\n        let x_pos = p.width/2;\n        let y_pos = p.height/2;\n        let acc = p.createVector(0, 0);\n        let vel = p.createVector(Math.round(Math.random()) * 2 - 1, Math.round(Math.random()) * 8 - 1);\n        let pos = p.createVector(x_pos, y_pos);\n        let radius = 10;\n        \n        boids.push(new Boid(p, acc, vel, pos, radius));\n        p.circle(x_pos, y_pos, radius);\n        p.fill('white');\n    }\n  }\n    \n    p.mouseClicked = () => {\n      let acc = p.createVector(0, 0);\n      let vel = p.createVector(Math.round(Math.random()) * 2 - 1, Math.round(Math.random()) * 2 - 1);\n      let pos = p.createVector(p.mouseX, p.mouseY);\n      let radius = 10;\n      boids.push(new Boid(p, acc, vel, pos, radius));\n      p.circle(p.mouseX, p.mouseY, radius);\n      p.fill('white')\n    }\n\n    p.draw = () => {\n      p.background('#282c34');\n      p.translate(-p.width/2,-p.height/2,0);\n      // Spinning\n      //let time = p.millis();\n      //p.rotateX(time/5000);\n      //p.orbitControl();\n      //p.rotateZ(time/5000);\n      p.text(title,0,0);\n      \n      \n      boids.forEach((boid) => {\n        boid.move(boids);\n        boid.display();\n      })\n    }\n}","/******************************************************************\n * The universe that will display the boids as they fly.\n * \n * @author Ron Rounsifer\n ******************************************************************/\nimport React, { Component, Fragment } from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from './sketch';\nimport '../styling/universe.css';\n\nimport { \n    Layout,\n  } from 'antd';\nimport '../styling/universe.css';\n\nconst { Content } = Layout;\n\n/******************************************************************\n * A Total Daily Exercise Expenditure calculator form.\n ******************************************************************/\nclass Universe extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      alive: props.alive,\n    }\n  }\n\n  /****************************************************************\n   * Render method to display the application.\n   ****************************************************************/\n  render() {\n    return (\n      <Fragment>\n        { this.state.alive ? <P5Wrapper sketch={sketch}  title={this.props.title} name={this.props.name} /> : null }  \n      </Fragment>\n      );\n  }\n}\n\nexport default Universe;","/**\n * Main entry point of the application.\n */\n\nimport React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport Universe from './components/universe';\n\nconst { Header, Footer, Content } = Layout;\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      activate: true\n    }\n  }\n  toggleActivate = () => {\n    this.setState({\n      activate: !this.state.activate,\n    })\n  }\n\n\n\n  // pass title and name to Universe\n  render() {\n    return(\n    <Layout className=\"App\">\n      <Content className=\"App-content\">\n        { this.state.activate ? <Universe alive={true} /> : <Universe alive={false} /> }\n      </Content>\n    </Layout>\n     \n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}